
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  clerkId: 'clerkId',
  email: 'email',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  avatar: 'avatar',
  role: 'role',
  status: 'status',
  tier: 'tier',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AgentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  contactPerson: 'contactPerson',
  companyName: 'companyName',
  phone: 'phone',
  whatsapp: 'whatsapp',
  country: 'country',
  city: 'city',
  experience: 'experience',
  specialization: 'specialization',
  website: 'website',
  socialMedia: 'socialMedia',
  businessLicense: 'businessLicense',
  tier: 'tier',
  totalPax: 'totalPax',
  paxThisMonth: 'paxThisMonth',
  totalRevenue: 'totalRevenue',
  conversionRate: 'conversionRate',
  lastActive: 'lastActive',
  preferences: 'preferences',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  contactPerson: 'contactPerson',
  permissions: 'permissions',
  department: 'department',
  level: 'level',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PackageScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  name: 'name',
  description: 'description',
  shortDesc: 'shortDesc',
  category: 'category',
  duration: 'duration',
  maxPax: 'maxPax',
  minPax: 'minPax',
  basePrice: 'basePrice',
  images: 'images',
  highlights: 'highlights',
  inclusions: 'inclusions',
  exclusions: 'exclusions',
  itinerary: 'itinerary',
  location: 'location',
  difficulty: 'difficulty',
  isActive: 'isActive',
  isFeatured: 'isFeatured',
  tags: 'tags',
  seoTitle: 'seoTitle',
  seoDesc: 'seoDesc',
  rating: 'rating',
  reviewCount: 'reviewCount',
  bookingCount: 'bookingCount',
  popularityScore: 'popularityScore',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  agentId: 'agentId'
};

exports.Prisma.QuoteScalarFieldEnum = {
  id: 'id',
  agentId: 'agentId',
  packageId: 'packageId',
  clientName: 'clientName',
  clientEmail: 'clientEmail',
  clientPhone: 'clientPhone',
  clientWhatsapp: 'clientWhatsapp',
  duration: 'duration',
  startDate: 'startDate',
  endDate: 'endDate',
  paxDetails: 'paxDetails',
  hotelOptions: 'hotelOptions',
  addOns: 'addOns',
  customizations: 'customizations',
  markupType: 'markupType',
  markupValue: 'markupValue',
  basePrice: 'basePrice',
  totalPrice: 'totalPrice',
  agentCommission: 'agentCommission',
  status: 'status',
  validUntil: 'validUntil',
  notes: 'notes',
  internalNotes: 'internalNotes',
  sentAt: 'sentAt',
  viewedAt: 'viewedAt',
  respondedAt: 'respondedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BookingScalarFieldEnum = {
  id: 'id',
  quoteId: 'quoteId',
  agentId: 'agentId',
  bookingRef: 'bookingRef',
  clientName: 'clientName',
  clientEmail: 'clientEmail',
  clientPhone: 'clientPhone',
  totalAmount: 'totalAmount',
  paidAmount: 'paidAmount',
  pendingAmount: 'pendingAmount',
  status: 'status',
  paymentStatus: 'paymentStatus',
  checkInDate: 'checkInDate',
  checkOutDate: 'checkOutDate',
  specialRequests: 'specialRequests',
  internalNotes: 'internalNotes',
  confirmedAt: 'confirmedAt',
  cancelledAt: 'cancelledAt',
  cancellationReason: 'cancellationReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  packageId: 'packageId'
};

exports.Prisma.SeasonalRateScalarFieldEnum = {
  id: 'id',
  packageId: 'packageId',
  seasonType: 'seasonType',
  multiplier: 'multiplier',
  startDate: 'startDate',
  endDate: 'endDate',
  isActive: 'isActive',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  bookingId: 'bookingId',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  paymentMethod: 'paymentMethod',
  stripePaymentIntentId: 'stripePaymentIntentId',
  razorpayPaymentId: 'razorpayPaymentId',
  transactionId: 'transactionId',
  paidAt: 'paidAt',
  failedAt: 'failedAt',
  failureReason: 'failureReason',
  refundedAt: 'refundedAt',
  refundAmount: 'refundAmount',
  refundReason: 'refundReason',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.HotelScalarFieldEnum = {
  id: 'id',
  name: 'name',
  category: 'category',
  location: 'location',
  description: 'description',
  amenities: 'amenities',
  images: 'images',
  priceRange: 'priceRange',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AddOnScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  category: 'category',
  price: 'price',
  duration: 'duration',
  location: 'location',
  images: 'images',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TierConfigScalarFieldEnum = {
  id: 'id',
  tier: 'tier',
  minPax: 'minPax',
  minRevenue: 'minRevenue',
  discountPercent: 'discountPercent',
  benefits: 'benefits',
  commissionRate: 'commissionRate',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AIConversationScalarFieldEnum = {
  id: 'id',
  agentId: 'agentId',
  sessionId: 'sessionId',
  messages: 'messages',
  context: 'context',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WhatsAppMessageScalarFieldEnum = {
  id: 'id',
  phoneNumber: 'phoneNumber',
  messageType: 'messageType',
  content: 'content',
  status: 'status',
  sentAt: 'sentAt',
  deliveredAt: 'deliveredAt',
  readAt: 'readAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AnalyticsEventScalarFieldEnum = {
  id: 'id',
  eventType: 'eventType',
  entityType: 'entityType',
  entityId: 'entityId',
  agentId: 'agentId',
  data: 'data',
  timestamp: 'timestamp',
  createdAt: 'createdAt'
};

exports.Prisma.CommissionScalarFieldEnum = {
  id: 'id',
  agentId: 'agentId',
  bookingId: 'bookingId',
  amount: 'amount',
  percentage: 'percentage',
  status: 'status',
  paidAt: 'paidAt',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  packageId: 'packageId',
  bookingId: 'bookingId',
  customerId: 'customerId',
  agentId: 'agentId',
  rating: 'rating',
  title: 'title',
  comment: 'comment',
  images: 'images',
  isVerified: 'isVerified',
  isPublic: 'isPublic',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  senderId: 'senderId',
  receiverId: 'receiverId',
  content: 'content',
  type: 'type',
  attachments: 'attachments',
  isRead: 'isRead',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ActivityScalarFieldEnum = {
  id: 'id',
  type: 'type',
  description: 'description',
  metadata: 'metadata',
  userId: 'userId',
  agentId: 'agentId',
  adminId: 'adminId',
  packageId: 'packageId',
  quoteId: 'quoteId',
  bookingId: 'bookingId',
  paymentId: 'paymentId',
  createdAt: 'createdAt'
};

exports.Prisma.SecurityLogScalarFieldEnum = {
  id: 'id',
  event: 'event',
  severity: 'severity',
  source: 'source',
  userId: 'userId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  action: 'action',
  resource: 'resource',
  resourceId: 'resourceId',
  userId: 'userId',
  oldValues: 'oldValues',
  newValues: 'newValues',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PermissionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  resource: 'resource',
  action: 'action',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RolePermissionScalarFieldEnum = {
  id: 'id',
  roleId: 'roleId',
  permissionId: 'permissionId',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  CUSTOMER: 'CUSTOMER',
  AGENT: 'AGENT',
  ADMIN: 'ADMIN',
  SUPER_ADMIN: 'SUPER_ADMIN'
};

exports.UserStatus = exports.$Enums.UserStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  SUSPENDED: 'SUSPENDED'
};

exports.UserTier = exports.$Enums.UserTier = {
  STANDARD: 'STANDARD',
  PREMIUM: 'PREMIUM',
  VIP: 'VIP'
};

exports.TierLevel = exports.$Enums.TierLevel = {
  BRONZE: 'BRONZE',
  SILVER: 'SILVER',
  GOLD: 'GOLD',
  PLATINUM: 'PLATINUM'
};

exports.AdminLevel = exports.$Enums.AdminLevel = {
  STAFF: 'STAFF',
  MANAGER: 'MANAGER',
  DIRECTOR: 'DIRECTOR',
  SUPER_ADMIN: 'SUPER_ADMIN'
};

exports.PackageCategory = exports.$Enums.PackageCategory = {
  CULTURAL: 'CULTURAL',
  ADVENTURE: 'ADVENTURE',
  BEACH: 'BEACH',
  WELLNESS: 'WELLNESS',
  LUXURY: 'LUXURY',
  FAMILY: 'FAMILY',
  HONEYMOON: 'HONEYMOON',
  BUSINESS: 'BUSINESS',
  CUSTOM: 'CUSTOM'
};

exports.DifficultyLevel = exports.$Enums.DifficultyLevel = {
  EASY: 'EASY',
  MODERATE: 'MODERATE',
  CHALLENGING: 'CHALLENGING',
  EXTREME: 'EXTREME'
};

exports.QuoteStatus = exports.$Enums.QuoteStatus = {
  DRAFT: 'DRAFT',
  SENT: 'SENT',
  VIEWED: 'VIEWED',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED',
  EXPIRED: 'EXPIRED'
};

exports.BookingStatus = exports.$Enums.BookingStatus = {
  CONFIRMED: 'CONFIRMED',
  PENDING: 'PENDING',
  CANCELLED: 'CANCELLED',
  COMPLETED: 'COMPLETED'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED',
  PARTIALLY_PAID: 'PARTIALLY_PAID'
};

exports.SeasonType = exports.$Enums.SeasonType = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  PEAK: 'PEAK'
};

exports.CommissionStatus = exports.$Enums.CommissionStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  PAID: 'PAID',
  CANCELLED: 'CANCELLED'
};

exports.MessageType = exports.$Enums.MessageType = {
  TEXT: 'TEXT',
  IMAGE: 'IMAGE',
  FILE: 'FILE',
  SYSTEM: 'SYSTEM'
};

exports.ActivityType = exports.$Enums.ActivityType = {
  USER_REGISTERED: 'USER_REGISTERED',
  USER_UPDATED: 'USER_UPDATED',
  QUOTE_CREATED: 'QUOTE_CREATED',
  QUOTE_SENT: 'QUOTE_SENT',
  QUOTE_ACCEPTED: 'QUOTE_ACCEPTED',
  QUOTE_REJECTED: 'QUOTE_REJECTED',
  BOOKING_CREATED: 'BOOKING_CREATED',
  BOOKING_CONFIRMED: 'BOOKING_CONFIRMED',
  BOOKING_CANCELLED: 'BOOKING_CANCELLED',
  PAYMENT_CREATED: 'PAYMENT_CREATED',
  PAYMENT_SUCCEEDED: 'PAYMENT_SUCCEEDED',
  PAYMENT_FAILED: 'PAYMENT_FAILED',
  REVIEW_CREATED: 'REVIEW_CREATED',
  PACKAGE_CREATED: 'PACKAGE_CREATED',
  PACKAGE_UPDATED: 'PACKAGE_UPDATED',
  AGENT_ASSIGNED: 'AGENT_ASSIGNED',
  COMMISSION_CALCULATED: 'COMMISSION_CALCULATED',
  MESSAGE_SENT: 'MESSAGE_SENT',
  LOGIN: 'LOGIN',
  LOGOUT: 'LOGOUT',
  SYSTEM_ACTION: 'SYSTEM_ACTION'
};

exports.Prisma.ModelName = {
  User: 'User',
  Agent: 'Agent',
  Admin: 'Admin',
  Package: 'Package',
  Quote: 'Quote',
  Booking: 'Booking',
  SeasonalRate: 'SeasonalRate',
  Payment: 'Payment',
  Hotel: 'Hotel',
  AddOn: 'AddOn',
  TierConfig: 'TierConfig',
  AIConversation: 'AIConversation',
  WhatsAppMessage: 'WhatsAppMessage',
  AnalyticsEvent: 'AnalyticsEvent',
  Commission: 'Commission',
  Review: 'Review',
  Message: 'Message',
  Activity: 'Activity',
  SecurityLog: 'SecurityLog',
  AuditLog: 'AuditLog',
  Role: 'Role',
  Permission: 'Permission',
  RolePermission: 'RolePermission'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
